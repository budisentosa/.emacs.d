#+Title: Ian Y.E. Pan's Emacs Configuration
#+Author: Ian Y.E. Pan
#+Date: 2019
* Evil Mode
I personally find Vim bindings to be the most efficient (especially for programming) way of editing text. I also changed the default ':q' to be killing current buffer instead of killing the frame.
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)  ; use C-u to scroll up half a page
  (evil-mode 1)
  (evil-ex-define-cmd "q" 'kill-this-buffer) ; prevent accidentally killing the frame

  (defun ian/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  (evil-ex-define-cmd "wq" 'ian/save-and-kill-this-buffer)
#+END_SRC
* Company Autocompletion
Use company for autocompletion and some dropdown menu colour tweaks based on the current colourscheme
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'company-mode)
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0)
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))

  (require 'color)
  (let ((bg (face-attribute 'default :background))
        (ac (face-attribute 'match :foreground)))
    (custom-set-faces
     `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 15)))))
     `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 15)))))
     `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 30)))))
     `(company-tooltip-selection ((t (:inherit font-lock-keyword-face))))
     `(company-tooltip-common ((t (:inherit font-lock-constant-face))))
     `(company-preview-common ((t (:foreground ,ac :background ,(color-lighten-name bg 25)))))))
#+END_SRC
* Flycheck and Spellcheck
Use aspell instead of ispell for checking spelling mistakes
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (setq ispell-program-name "/usr/local/bin/aspell")
#+END_SRC
* Ido
Ido (with ido-vertical package) for selecting buffer/file with great efficiency.
#+BEGIN_SRC emacs-lisp
  ;; Core Ido
  (ido-mode 1)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)

  ;; Vertical (for better visibility)
  (ido-vertical-mode 1)
#+END_SRC
* Indentation
Use 4-space indentation (no tabs), except for JavaScript (use 2 spaces)
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq js-indent-level 2)
  (setq c-default-style
        '((java-mode . "java")
          (awk-mode . "awk")
          (other . "k&r")))
  (setq-default c-basic-offset 4)

  (defun ian/newline-and-push-brace ()
    "`newline-and-indent', but bracket aware."
    (interactive)
    (insert "\n")
    (when (looking-at "}")
      (insert "\n")
      (indent-according-to-mode)
      (forward-line -1))
    (indent-according-to-mode))
  (global-set-key (kbd "RET") 'ian/newline-and-push-brace)
#+END_SRC
* LaTeX
Compiling LaTeX from Org Mode. The 'minted' package adds colours to the source code blocks.
#+BEGIN_SRC emacs-lisp
  ;; In order for 'pdflatex' to work. Also had to export PATH from .zshrc
  ;; export PATH="$PATH:/Library/TeX/texbin"
  (setenv "PATH" (concat "/usr/texbin:/Library/TeX/texbin:" (getenv "PATH")))
  (setq exec-path (append '("/usr/texbin" "/Library/TeX/texbin") exec-path))

  ;; Colourful Org LaTeX Code Blocks
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-minted-options '(("linenos=true")))

  (setq org-highlight-latex-and-related (quote (latex)))
  (setq org-latex-classes
        (quote
         (("article" "\\documentclass[12pt, a4paper]{article}"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))
#+END_SRC
* Load init file anywhere
A quick command to reload the configuration file(s).
#+BEGIN_SRC emacs-lisp
  (defun ian/load-init()
    "Reload .emacs.d/init.el"
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
* Magit
Magit -- need I say more? The best git interface ever.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Org Mode
Some minimal org mode tweaks.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
* Registers
Set up registers for jumping to frequently-used files quickly.
#+BEGIN_SRC emacs-lisp
  (set-register ?e '(file . "~/.emacs.d/init.el"))
  (set-register ?o '(file . "~/.emacs.d/config.org"))
  (set-register ?c '(file . "~/.emacs.d/custom.el"))
#+END_SRC
* Smooth Scrolling
Override Emacs' default scrolling design: jumping half-page. Added "-aggressively" to prevent the cursor to jump around when user scrolls.
#+BEGIN_SRC emacs-lisp
  (smooth-scrolling-mode 1)
  (setq scroll-margin 1
        smooth-scroll-margin 1
        scroll-conservatively 0
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01)
  (setq-default scroll-up-aggressively 0.01
                scroll-down-aggressively 0.01)
#+END_SRC
* Start-up
** Better looks and defaults
*** Auto-pairing brackets etc.
Electric-pair-mode has improved quite a bit in recent Emacs versions. No longer need an extra package for this.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC
*** Improving / Cleaning up the UI.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq ring-bell-function 'ignore)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode t)
  (setq blink-cursor-blinks 0) ;; blink forever
  (setq-default indicate-empty-lines t)
  (setq-default line-spacing 3)
  (setq frame-title-format '("Emacs"))
  (add-hook 'prog-mode-hook 'highlight-numbers-mode)
  (add-hook 'prog-mode-hook 'highlight-operators-mode)
  (add-hook 'prog-mode-hook 'hes-mode)    ;; highlight escape sequences
#+END_SRC
** No Backup~ Files
For some people it may be useful. But I just disable it because I rarely needed those backup files scattering about in directories.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
** Highlight matching parentheses (without delay)
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC
** Set 'scratch' buffer's major mode and welcome message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'org-mode)
#+END_SRC
* Transparent Emacs
Sometimes I wanna look cool and show off my wallpaper through my editor. Use ~C-c t~ to toggle transparency.
#+BEGIN_SRC emacs-lisp
  (defun ian/toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(85 . 85) '(100 . 100)))))
  (global-set-key (kbd "C-c t") 'ian/toggle-transparency)
#+END_SRC
* Views and Windows
Split right and split below.
#+BEGIN_SRC emacs-lisp
  (defun ian/split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'ian/split-and-follow-horizontally)
  (defun ian/split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'ian/split-and-follow-vertically)
#+END_SRC
* Which Key
#+BEGIN_SRC emacs-lisp
  (which-key-mode t)
  (setq which-key-idle-delay 0.5)
  (setq which-key-idle-secondary-delay 0.5)
#+END_SRC
* Whitespace cleanup upon saving
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
* custome leader key default \
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'hs-minor-mode)
  (global-evil-leader-mode)
  (evil-leader/set-leader "SPC")
  (evil-leader/set-key
    "e" 'find-file
    "bb" 'switch-to-buffer
    "bn" 'next-buffer
    "bp" 'previous-buffer
    "bk" 'kill-buffer
    "k" 'kill-buffer
    "gs" 'magit-status
    "oc" 'org-capture
    "oa" 'org-archive-subtree
    "pp" 'projectile-switch-project
    "pf" 'projectile-find-file
    "pt" 'treemacs
    "ci" 'evilnc-comment-or-uncomment-lines
    "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
    "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
    "cc" 'evilnc-copy-and-comment-lines
    "cp" 'evilnc-comment-or-uncomment-paragraphs
    "cr" 'comment-or-uncomment-region
    "cv" 'evilnc-toggle-invert-comment-line-by-line
    "."  'evilnc-copy-and-comment-operator
    "\\" 'evilnc-comment-operator ; if you prefer backslash key
)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-indexing-method 'alien)
  ;;; esc quits
  (defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-insert-state-map "jk" 'evil-normal-state)
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-evil-visualstar-mode)
  (indent-guide-global-mode)
  (setq indent-guide-delay 0.1)
  (setq evil-emacs-state-modes nil)
  (setq evil-insert-state-modes nil)
  (setq evil-motion-state-modes nil)
  (setq evil-normal-state-modes
        (append evil-emacs-state-modes
                evil-insert-state-modes
                evil-normal-state-modes
                evil-motion-state-modes))
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-visual-state-map "j" 'evil-next-visual-line)
  (define-key evil-visual-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "C-j") 'move-text-down)
  (define-key evil-normal-state-map (kbd "C-k") 'move-text-up)
  (evil-global-set-key 'normal "H" 'evil-first-non-blank)
  (evil-global-set-key 'visual "H" 'evil-first-non-blank)
  (evil-global-set-key 'motion "H" 'evil-first-non-blank)
  (evil-global-set-key 'normal "L" (lambda () (interactive) (evil-end-of-line)))
  (evil-global-set-key 'visual "L" (lambda () (interactive) (evil-end-of-line)))
  (evil-global-set-key 'motion "L" (lambda () (interactive) (evil-end-of-line)))
  (define-key evil-motion-state-map "gl" 'evil-avy-goto-line)
  (define-key evil-normal-state-map "gl" 'evil-avy-goto-line)
  (define-key evil-motion-state-map "go" 'evil-avy-goto-char-2)
  (define-key evil-normal-state-map "go" 'evil-avy-goto-char-2)
#+END_SRC

(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
delay - flycheck

esc sebagai ctrl g
https://github.com/noctuid/evil-guide

https://github.com/noctuid/evil-guide#using-escape-to-exit-the-minibuffer

evil-numbers
evil-visualstar
evil-nerd-commenter
evil-matchit
surround
indent-guide

using , evil on magit

;load a file named key-chord.el from some directory in the load-path (e.g. "~/.emacs.d")
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define-global "jk" 'evil-normal-state)
